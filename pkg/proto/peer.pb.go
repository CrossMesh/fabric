// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/peer.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PeerBackend_BackendType int32

const (
	PeerBackend_TCP PeerBackend_BackendType = 0
)

var PeerBackend_BackendType_name = map[int32]string{
	0: "TCP",
}

var PeerBackend_BackendType_value = map[string]int32{
	"TCP": 0,
}

func (x PeerBackend_BackendType) String() string {
	return proto.EnumName(PeerBackend_BackendType_name, int32(x))
}

func (PeerBackend_BackendType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e2317e79b35cb5cd, []int{0, 0}
}

type PeerBackend struct {
	Backend              PeerBackend_BackendType `protobuf:"varint,1,opt,name=backend,proto3,enum=proto.PeerBackend_BackendType" json:"backend,omitempty"`
	Ip                   uint32                  `protobuf:"varint,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Details              []*any.Any              `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PeerBackend) Reset()         { *m = PeerBackend{} }
func (m *PeerBackend) String() string { return proto.CompactTextString(m) }
func (*PeerBackend) ProtoMessage()    {}
func (*PeerBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2317e79b35cb5cd, []int{0}
}

func (m *PeerBackend) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerBackend.Unmarshal(m, b)
}
func (m *PeerBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerBackend.Marshal(b, m, deterministic)
}
func (m *PeerBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerBackend.Merge(m, src)
}
func (m *PeerBackend) XXX_Size() int {
	return xxx_messageInfo_PeerBackend.Size(m)
}
func (m *PeerBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerBackend.DiscardUnknown(m)
}

var xxx_messageInfo_PeerBackend proto.InternalMessageInfo

func (m *PeerBackend) GetBackend() PeerBackend_BackendType {
	if m != nil {
		return m.Backend
	}
	return PeerBackend_TCP
}

func (m *PeerBackend) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *PeerBackend) GetDetails() []*any.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

type Peer struct {
	PeerType             uint32         `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	VirtualIp            uint32         `protobuf:"varint,2,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty"`
	VirtualMask          uint32         `protobuf:"varint,3,opt,name=virtual_mask,json=virtualMask,proto3" json:"virtual_mask,omitempty"`
	Version              uint64         `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Tag                  []string       `protobuf:"bytes,5,rep,name=tag,proto3" json:"tag,omitempty"`
	Backend              []*PeerBackend `protobuf:"bytes,6,rep,name=backend,proto3" json:"backend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2317e79b35cb5cd, []int{1}
}

func (m *Peer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peer.Unmarshal(m, b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return xxx_messageInfo_Peer.Size(m)
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetPeerType() uint32 {
	if m != nil {
		return m.PeerType
	}
	return 0
}

func (m *Peer) GetVirtualIp() uint32 {
	if m != nil {
		return m.VirtualIp
	}
	return 0
}

func (m *Peer) GetVirtualMask() uint32 {
	if m != nil {
		return m.VirtualMask
	}
	return 0
}

func (m *Peer) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Peer) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Peer) GetBackend() []*PeerBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

type PeerRequest struct {
	RequestId            uint32   `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerRequest) Reset()         { *m = PeerRequest{} }
func (m *PeerRequest) String() string { return proto.CompactTextString(m) }
func (*PeerRequest) ProtoMessage()    {}
func (*PeerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2317e79b35cb5cd, []int{2}
}

func (m *PeerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerRequest.Unmarshal(m, b)
}
func (m *PeerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerRequest.Marshal(b, m, deterministic)
}
func (m *PeerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRequest.Merge(m, src)
}
func (m *PeerRequest) XXX_Size() int {
	return xxx_messageInfo_PeerRequest.Size(m)
}
func (m *PeerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRequest proto.InternalMessageInfo

func (m *PeerRequest) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type PeerReply struct {
	RequestId            uint32   `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Peer                 []*Peer  `protobuf:"bytes,2,rep,name=peer,proto3" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerReply) Reset()         { *m = PeerReply{} }
func (m *PeerReply) String() string { return proto.CompactTextString(m) }
func (*PeerReply) ProtoMessage()    {}
func (*PeerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2317e79b35cb5cd, []int{3}
}

func (m *PeerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerReply.Unmarshal(m, b)
}
func (m *PeerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerReply.Marshal(b, m, deterministic)
}
func (m *PeerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerReply.Merge(m, src)
}
func (m *PeerReply) XXX_Size() int {
	return xxx_messageInfo_PeerReply.Size(m)
}
func (m *PeerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerReply.DiscardUnknown(m)
}

var xxx_messageInfo_PeerReply proto.InternalMessageInfo

func (m *PeerReply) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *PeerReply) GetPeer() []*Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.PeerBackend_BackendType", PeerBackend_BackendType_name, PeerBackend_BackendType_value)
	proto.RegisterType((*PeerBackend)(nil), "proto.PeerBackend")
	proto.RegisterType((*Peer)(nil), "proto.Peer")
	proto.RegisterType((*PeerRequest)(nil), "proto.PeerRequest")
	proto.RegisterType((*PeerReply)(nil), "proto.PeerReply")
}

func init() { proto.RegisterFile("proto/peer.proto", fileDescriptor_e2317e79b35cb5cd) }

var fileDescriptor_e2317e79b35cb5cd = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0xfc, 0x69, 0xf3, 0xe5, 0xc6, 0x96, 0x32, 0x88, 0x8c, 0x8a, 0x1a, 0xb3, 0xca,
	0xa2, 0x4c, 0xa1, 0x6e, 0xdc, 0xaa, 0xab, 0x22, 0x42, 0x19, 0xba, 0x2f, 0x53, 0x73, 0x2d, 0xa1,
	0x31, 0x19, 0x93, 0xb4, 0x90, 0xa7, 0xf1, 0x51, 0x7c, 0x35, 0x99, 0x99, 0xa4, 0x06, 0x5c, 0xb8,
	0x9a, 0x73, 0xcf, 0xfd, 0x91, 0x9c, 0x7b, 0x60, 0x22, 0xcb, 0xa2, 0x2e, 0x66, 0x12, 0xb1, 0x64,
	0x5a, 0x92, 0x81, 0x7e, 0x2e, 0xce, 0xb7, 0x45, 0xb1, 0xcd, 0x70, 0xa6, 0xa7, 0xcd, 0xfe, 0x6d,
	0x26, 0xf2, 0xc6, 0x10, 0xd1, 0xa7, 0x05, 0xc1, 0x12, 0xb1, 0x7c, 0x14, 0xaf, 0x3b, 0xcc, 0x13,
	0x72, 0x0f, 0xde, 0xc6, 0x48, 0x6a, 0x85, 0x56, 0x3c, 0x9e, 0x5f, 0x1b, 0x90, 0xf5, 0x20, 0xd6,
	0xbe, 0xab, 0x46, 0x22, 0xef, 0x70, 0x32, 0x06, 0x3b, 0x95, 0xd4, 0x0e, 0xad, 0x78, 0xc4, 0xed,
	0x54, 0x12, 0x06, 0x5e, 0x82, 0xb5, 0x48, 0xb3, 0x8a, 0x3a, 0xa1, 0x13, 0x07, 0xf3, 0x53, 0x66,
	0x62, 0xb0, 0x2e, 0x06, 0x7b, 0xc8, 0x1b, 0xde, 0x41, 0xd1, 0x19, 0x04, 0xbd, 0xef, 0x12, 0x0f,
	0x9c, 0xd5, 0xd3, 0x72, 0xf2, 0x2f, 0xfa, 0xb2, 0xc0, 0x55, 0x3f, 0x27, 0x97, 0xe0, 0xab, 0xd3,
	0xd6, 0x75, 0x23, 0x51, 0x87, 0x1b, 0xf1, 0xff, 0xca, 0xd0, 0xf8, 0x15, 0xc0, 0x21, 0x2d, 0xeb,
	0xbd, 0xc8, 0xd6, 0xc7, 0x14, 0x7e, 0xeb, 0x2c, 0x24, 0xb9, 0x85, 0x93, 0x6e, 0xfd, 0x2e, 0xaa,
	0x1d, 0x75, 0x34, 0x10, 0xb4, 0xde, 0x8b, 0xa8, 0x76, 0x84, 0x82, 0x77, 0xc0, 0xb2, 0x4a, 0x8b,
	0x9c, 0xba, 0xa1, 0x15, 0xbb, 0xbc, 0x1b, 0xc9, 0x04, 0x9c, 0x5a, 0x6c, 0xe9, 0x20, 0x74, 0x62,
	0x9f, 0x2b, 0x49, 0xa6, 0x3f, 0x2d, 0x0d, 0xf5, 0x6d, 0xe4, 0x77, 0x4b, 0xc7, 0x66, 0xa2, 0xa9,
	0xa9, 0x98, 0xe3, 0xc7, 0x1e, 0xab, 0x5a, 0x45, 0x2d, 0x8d, 0x5c, 0xa7, 0x49, 0x7b, 0x88, 0xdf,
	0x3a, 0x8b, 0x24, 0x7a, 0x06, 0xdf, 0xd0, 0x32, 0x6b, 0xfe, 0x60, 0xc9, 0x0d, 0xb8, 0xaa, 0x01,
	0x6a, 0xeb, 0x10, 0x41, 0x2f, 0x04, 0xd7, 0x8b, 0xcd, 0x50, 0x3b, 0x77, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xcd, 0x82, 0xe8, 0x6d, 0x1b, 0x02, 0x00, 0x00,
}
