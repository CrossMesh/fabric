// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NetworkManagmentClient is the client API for NetworkManagment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkManagmentClient interface {
	SeedPeer(ctx context.Context, in *SeedPeerRequest, opts ...grpc.CallOption) (*Result, error)
	SetNetwork(ctx context.Context, in *SetNetworkRequest, opts ...grpc.CallOption) (*Result, error)
	ReloadConfig(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*Result, error)
}

type networkManagmentClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkManagmentClient(cc grpc.ClientConnInterface) NetworkManagmentClient {
	return &networkManagmentClient{cc}
}

var networkManagmentSeedPeerStreamDesc = &grpc.StreamDesc{
	StreamName: "SeedPeer",
}

func (c *networkManagmentClient) SeedPeer(ctx context.Context, in *SeedPeerRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.NetworkManagment/SeedPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var networkManagmentSetNetworkStreamDesc = &grpc.StreamDesc{
	StreamName: "SetNetwork",
}

func (c *networkManagmentClient) SetNetwork(ctx context.Context, in *SetNetworkRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.NetworkManagment/SetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var networkManagmentReloadConfigStreamDesc = &grpc.StreamDesc{
	StreamName: "ReloadConfig",
}

func (c *networkManagmentClient) ReloadConfig(ctx context.Context, in *ReloadRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.NetworkManagment/ReloadConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkManagmentService is the service API for NetworkManagment service.
// Fields should be assigned to their respective handler implementations only before
// RegisterNetworkManagmentService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type NetworkManagmentService struct {
	SeedPeer     func(context.Context, *SeedPeerRequest) (*Result, error)
	SetNetwork   func(context.Context, *SetNetworkRequest) (*Result, error)
	ReloadConfig func(context.Context, *ReloadRequest) (*Result, error)
}

func (s *NetworkManagmentService) seedPeer(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SeedPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/pb.NetworkManagment/SeedPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SeedPeer(ctx, req.(*SeedPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *NetworkManagmentService) setNetwork(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/pb.NetworkManagment/SetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SetNetwork(ctx, req.(*SetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *NetworkManagmentService) reloadConfig(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ReloadConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/pb.NetworkManagment/ReloadConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ReloadConfig(ctx, req.(*ReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterNetworkManagmentService registers a service implementation with a gRPC server.
func RegisterNetworkManagmentService(s grpc.ServiceRegistrar, srv *NetworkManagmentService) {
	srvCopy := *srv
	if srvCopy.SeedPeer == nil {
		srvCopy.SeedPeer = func(context.Context, *SeedPeerRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SeedPeer not implemented")
		}
	}
	if srvCopy.SetNetwork == nil {
		srvCopy.SetNetwork = func(context.Context, *SetNetworkRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SetNetwork not implemented")
		}
	}
	if srvCopy.ReloadConfig == nil {
		srvCopy.ReloadConfig = func(context.Context, *ReloadRequest) (*Result, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ReloadConfig not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "pb.NetworkManagment",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "SeedPeer",
				Handler:    srvCopy.seedPeer,
			},
			{
				MethodName: "SetNetwork",
				Handler:    srvCopy.setNetwork,
			},
			{
				MethodName: "ReloadConfig",
				Handler:    srvCopy.reloadConfig,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "control/rpc/pb/core.proto",
	}

	s.RegisterService(&sd, nil)
}
