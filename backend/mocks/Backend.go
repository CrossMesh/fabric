// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	backend "git.uestc.cn/sunmxt/utt/backend"
	mock "github.com/stretchr/testify/mock"

	net "net"

	pb "git.uestc.cn/sunmxt/utt/proto/pb"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

// Connect provides a mock function with given fields: _a0
func (_m *Backend) Connect(_a0 string) (backend.Link, error) {
	ret := _m.Called(_a0)

	var r0 backend.Link
	if rf, ok := ret.Get(0).(func(string) backend.Link); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(backend.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IP provides a mock function with given fields:
func (_m *Backend) IP() net.IP {
	ret := _m.Called()

	var r0 net.IP
	if rf, ok := ret.Get(0).(func() net.IP); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.IP)
		}
	}

	return r0
}

// Priority provides a mock function with given fields:
func (_m *Backend) Priority() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// Publish provides a mock function with given fields:
func (_m *Backend) Publish() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Shutdown provides a mock function with given fields:
func (_m *Backend) Shutdown() {
	_m.Called()
}

// Type provides a mock function with given fields:
func (_m *Backend) Type() pb.PeerBackend_BackendType {
	ret := _m.Called()

	var r0 pb.PeerBackend_BackendType
	if rf, ok := ret.Get(0).(func() pb.PeerBackend_BackendType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pb.PeerBackend_BackendType)
	}

	return r0
}

// Watch provides a mock function with given fields: _a0
func (_m *Backend) Watch(_a0 func(backend.Backend, []byte, string)) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(backend.Backend, []byte, string)) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
